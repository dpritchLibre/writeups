* Using Packrat for package dependency management in R

** Useful links

https://rstudio.github.io/packrat/
https://cran.r-project.org/package=packrat




** packrat initialization

Use =packrat::init("~/projects/myprojdir")=.

GOTCHA: Packrat tries to unload libraries (unanswered questions: which, why?)
when running =init=.  For me this failed when =devtools= is loaded.  Thus, it is
advisable to initialize packrat from a clean session using e.g. =R --vanilla=.

GOTCHA: if the =--vanilla= or =--no-environ= command line argument was provided
to =R=, or the =R_PROFILE_USER= environmental variable was set or provided in
one of the environmental files such as =~/.Renviron=, then Packrat will not work
as desired.




*** A note about using Packrat with git

If you have a =.git= directory at the top level of your project, then
=packrat::init= will append the line =packrat/lib*/= to your =.gitignore= file
(creating the =.gitignore= file if one doesn't yet exist).  If you ran
=packrat::init= before you initialized your git repository, then you should
manually add this line since these directories are specific the local system.



*** Packrat project skeleton

This creates a project skeleton as follows.


#+BEGIN_SRC shell
userid@hostname:~/projects/myprojdir$ tree -a --charset=ascii
#+END_SRC


#+BEGIN_SRC shell
userid@hostname:~/projects/myprojdir$ tree -a -I 'packrat/lib*'
#+END_SRC

#+BEGIN_SRC shell
userid@hostname:~/projects/myprojdir$ tree -a -L 4
#+END_SRC




*** Packrat directory organization

Packrat places the =.Rprofile= file at the top level of you project directory.
The contents of the file are simply the following:

#+BEGIN_SRC shell
#### -- Packrat Autoloader (version 0.5.0) -- ####
source("packrat/init.R")
#### -- End Packrat Autoloader -- ####
#+END_SRC

The intention is that when you work on a project with Packrat, that you start
your R session in the project directory.  When you do this then R will source
the =.Rprofile= file as part of the startup process.  A few points to note:

  - This means that you can't use usual recommended practice of invoking the
    =--vanilla= option when running scripts.  Instead you can use =--no-save
    --no-restore --no-site-file --no-environ=.
  - You must start R in the top-level directory: using a subdirectory
    doesn't have the same effect.  So you can't =cd= into a subdirectory and run
    a command such as =Rscript myscript= as you often might.
  - Your user R profile isn't loaded.  You can source it after startup, but note
    that if you have commands inside of a =.First= function, then you will have
    to explicitly call it yourself since R won't call it for you.



** Packrat mode

The Packrat package has a concept of a "Packrat mode" which is either on or off
at any time.  When it is "on", it is with respect to a given project.  The
project can be changed.




** Running R in a directory with Packrat

# The =init.R= file has the following section of code inside a top-level call to
# =local=.  The =libDir= variable is set in an earlier section of code to the
# location of the local version of Packrat, so for our example this is TODO.

# #+BEGIN_SRC R
# if (suppressWarnings(requireNamespace("packrat", quietly = TRUE, lib.loc = libDir))) {

#   # some code determining whether to set the variable `print.banner` to `TRUE` or `FALSE`

#   return(packrat::on(print.banner = print.banner))
# }
# #+END_SRC

The =init.R= file calls =packrat::on=, which in turn calls
=packrat::setPackratModeOn=.  This function first obtains a value for the
varible =state=, which stores information that can be used to return an R
session to its usual state if Packrat mode is on.  Next, an environmental
variable =R_PACKRAT_MODE= is set as a flag to indicate that Packrat mode is on
by calling =setPackratModeEnvironmentVar=.  After this,
=packrat::setPackratModeOn= calls =packrat::afterPackratModeOn= and returns.

*** Checking that Packrat mode is on

Use =packrat:::isPackratModeOn=.


*** Changing the value of =.libPaths=

Packrat changes the location of the libraries known to =.libPaths= to the
project directories.  This affects =install.packages= and =library=.  Note that
even if you set the =R_LIBS= environmental variable before startup or specify it
in one of the environmental files such as =~/.Renviron=, that the user profile
code runs after the library search paths have been set, and so overwrites it.

Where exactly?
  1. =packrat/lib/x86_64-pc-linux-gnu/3.4.4= installed packages
  2. =packrat/lib-ext/x86_64-pc-linux-gnu/3.4.4= packages that ship with R
  3. =packrat/lib-R/x86_64-pc-linux-gnu/3.4.4= not sure what this is for!


*** Bootstrapping Packrat

If you obtain a Packrat project from a VCS, then it will typically not include
the =packrat/lib*/= directories, since these can be derived from other
information.  Packrat will install them for you if needed (how, by calling the
.Rprofile function?).


*** Installing packages

You can use the usual =install.packages= to install a package.  The installed
package will be installed into =packrat/lib/x86_64-pc-linux-gnu/3.4.4= due to
the construction of the directories stored by =.libPaths=.

To include the source package in the directory, call =packrat::snapshot=.  Note
that this has to be done during the same session that =install.packages= was called.
