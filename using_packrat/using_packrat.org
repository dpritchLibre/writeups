#+TITLE: Using Packrat for package dependency management in R

#+SETUPFILE: ../export-setup/main-settings.org

#+BEGIN_EXPORT latex
  % background color for code environments
  \definecolor{lightyellow}{RGB}{255,255,224}
  \definecolor{lightbrown}{RGB}{249,234,197}
  \definecolor{lightpurple}{RGB}{245,228,244}

  % create a listings environment for Bash
  \lstdefinestyle{bash}{%
    language=bash,
    backgroundcolor=\color{lightyellow},
    basicstyle=\fontsize{9.75}{10.75}\fontfamily{pcr}\selectfont,
    keywordstyle=\color{Firebrick3},
    stringstyle=\color{Green4},
    commentstyle=\color{Purple3},
    showstringspaces=false,
    morecomment=[l]{userid@},
    morecomment=[l]{onyenid@},
    morecomment=[l]{localid@},
    morecomment=[l]{sftp> },
    moredelim=[is][\bfseries]{[*@}{@*]},
    frame=single,
    frameround={tttt},
    rulecolor=\color{gray!50}
  }


  % create an environment for shell sessions
  \lstdefinestyle{shell}{%
    backgroundcolor=\color{lightbrown},
    basicstyle=\fontsize{9.75}{10.75}\fontfamily{pcr}\selectfont,
    commentstyle=\bfseries,
    morecomment=[l]{userid@},
    morecomment=[l]{onyenid@},
    morecomment=[l]{localid@},
    morecomment=[l]{sftp> },
    moredelim=[is][\bfseries]{[*@}{@*]},
    escapeinside={(*@}{@*)},
    frame=single,
    frameround={tttt},
    rulecolor=\color{gray!50}
  }


  % create a light blue colored background for R scripts
  \lstdefinestyle{r-script}{%
    language=R,
    backgroundcolor=\color{Blue1!5},
    basicstyle=\fontsize{9.75}{10.75}\fontfamily{pcr}\selectfont,
    keywordstyle=\color{Firebrick3},
    commentstyle=\color{DarkOrchid4},
    stringstyle=\color{Blue1},
    showstringspaces=false,
    otherkeywords = {},
    deletekeywords={action, args, as, char, commandArgs, csv, data, expr, file, getenv,
      integer, install, installed, interactive, length, library, max, mean, min,
      nchar, new, numeric, packages, path, print, read, save, set, substr,
      summary, write, \%/\%, \%_\%},
    frame=single,
    frameround={tttt},
    rulecolor=\color{gray!50}
  }

  % create an environment for Terminal sessions
  \lstdefinestyle{r-console}{%
    backgroundcolor=\color{lightpurple!60},
    basicstyle=\fontsize{9.75}{10.75}\fontfamily{pcr}\selectfont,
    commentstyle=\bfseries,
    morecomment=[l]{s>},
    keywords={},
    frame=single,
    frameround={tttt},
    rulecolor=\color{gray!50}
  }

  % \theoremstyle{definition}
  \newtheorem{gotcha}{Gotcha}
#+END_EXPORT




* Introduction

** Overview

TODO




** Useful links

Here are the official Packrat links.

  - https://rstudio.github.io/packrat/
  - https://cran.r-project.org/package=packrat




* New project Packrat initialization

Suppose for the time-being that we are starting a new project that we want to
use Packrat with.  We will later consider adding Packrat to an existing project.

** Creating a skeleton package

To start, we use src_R[:exports code]{usethis} to create a package
src_R[:exports code]{exampleRPackage}, and following that we initialize git in
the new directory.  Then we use the src_shell[:exports code]{tree} utility to
see the contents of the new directory (but ignoring the src_shell[:exports
code]{.git} directory).

As an aside, we note that it is helpful to initialize git before initializing
Packrat, because the Packrat will add a src_shell[:exports code]{.gitignore}
file for us in the directory if it sees that the project is version controlled
with git.

#+LATEX: \lstset{style=shell}
#+BEGIN_SRC shell
  userid@hostname:~$ Rscript --vanilla \
  [*@>                          -e 'usethis::create_package("exampleRPackage")'@*]
  + Setting active project to '/home/userid/exampleRPackage'
  + Creating 'R/'
  + Creating 'man/'
  + Writing 'DESCRIPTION'
  + Writing 'NAMESPACE'

  userid@hostname:~/Downloads$ cd exampleRPackage/
  userid@hostname:~/exampleRPackage$ git init
  Initialized empty Git repository in /home/userid/exampleRPackage/.git/

  userid@hostname:~/exampleRPackage$ tree -a -I .git
  .
  |-- DESCRIPTION
  |-- man
  |-- NAMESPACE
  `-- R

  2 directories, 2 files
#+END_SRC




** Initializing Packrat

Next, let's initialize the project with Packrat.  The command to initialize a
Packrat project is the R command src_R[:exports code]{packrat::init}, so we run
src_R[:exports code]{packrat::init} in a clean R session, and then take a look
at the newly created files (ignoring files more than three levels deep).

We note that if you have a src_shell[:exports code]{.git} directory at the top
level of your project, then src_R[:exports code]{packrat::init} will append the
line src_shell[:exports code]{packrat/lib*/} to your src_R[:exports
code]{.gitignore} file (creating the src_R[:exports code]{.gitignore} file if
one doesn't yet exist).  If you ran src_R[:exports code]{packrat::init} before
you initialized your git repository, then you will usually want to add this line
since the directories that are ignored are specific the local system.

\begin{gotcha}
  Packrat tries to unload the non-default libraries (unanswered
  question: why?)  when running \lstinline{init}.  For me the unloading failed when
  \lstinline{devtools} was loaded.  Thus, it is advisable to initialize Packrat from
  a clean session using e.g. \lstinline{R --vanilla} to avoid any such difficulties.
\end{gotcha}

#+BEGIN_SRC shell
  userid@hostname:~/exampleRPackage$ Rscript --vanillla -e 'packrat::init(".")'
  Initializing packrat project in directory:
  - "~/Downloads/exampleRPackage"

  Adding these packages to packrat:
              _
      packrat   0.5.0

  Fetching sources for packrat (0.5.0) ... OK (CRAN current)
  Snapshot written to '/home/userid/exampleRPackage/packrat/packrat.lock'
  Installing packrat (0.5.0) ...
          OK (built source)
  Initialization complete!

  userid@hostname:~/exampleRPackage$ tree -a -I '.git' -L 4
  .
  |-- DESCRIPTION
  |-- .gitignore
  |-- man
  |-- NAMESPACE
  |-- packrat
  |   |-- init.R
  |   |-- lib
  |   |   `-- x86_64-pc-linux-gnu
  |   |       `-- 3.4.4
  |   |-- lib-ext
  |   |   `-- x86_64-pc-linux-gnu
  |   |       `-- 3.4.4
  |   |-- lib-R
  |   |   `-- x86_64-pc-linux-gnu
  |   |       `-- 3.4.4
  |   |-- packrat.lock
  |   |-- packrat.opts
  |   `-- src
  |       `-- packrat
  |           `-- packrat_0.5.0.tar.gz
  |-- R
  |-- .Rbuildignore
  `-- .Rprofile

  14 directories, 9 files
#+END_SRC




** The project =.Rprofile= file

*** The contents of =.Rprofile=

In the shell session below we can see that Packrat places the src_shell[:exports
code]{.Rprofile} file at the top level of you project directory with the
following contents.  The intention is that when you work on a project with
Packrat that you start your R session in the project directory.  When you do
start R in the project directory then R as a result R will source the
src_shell[:exports code]{.Rprofile} file as part of the startup process, which
in turn sources src_shell[:exports code]{packrat/init.R}.

#+BEGIN_SRC shell
  userid@hostname:~/exampleRPackage$ cat .Rprofile
  #### -- Packrat Autoloader (version 0.5.0) -- ####
  source("packrat/init.R")
  #### -- End Packrat Autoloader -- ####
#+END_SRC




*** =.Rprofile=-related workflow changes.

The fact that Packrat places an src_shell[:exports code]{.Rprofile} file at the
top of your project directory raises the following potential issues.

\begin{gotcha}
  This means that you can't use usual recommended practice of invoking the
  \lstinline{--vanilla} option when running scripts.  Instead you can use \lstinline{--no-save}
  \lstinline{--no-restore} \lstinline{--no-site-file} \lstinline{--no-environ}.

  Additionally, if the \lstinline{R_PROFILE_USER} environmental variable was set or
  provided in one of the environmental files such as \lstinline{~/.Renviron}, then the
  project \lstinline{.Rprofile} file will not be loaded at startup and Packrat
  won't work as desired.
\end{gotcha}

\begin{gotcha}
  You have to start R in the top-level directory: starting R in a subdirectory
  doesn't have the same effect.  So for example, you can't  \lstinline{cd} into a
  subdirectory and run a command such as \lstinline{Rscript myscript} as you typically would.
\end{gotcha}

\begin{gotcha}
  If the project \lstinline{.Rprofile} is loaded, then your user R profile isn't
  loaded.  You can however, explicitly source your user \lstinline{.Rprofile} from
  the project profile, but beware, now you don't have the option of turning off
  any directives in the user \lstinline{.Rprofile} by using a \lstinline{--vanilla}
  or \lstinline{--no-init} option when reproducibility is important.  Thus it may
  be advisable to wrap your code in an \lstinline!if (interactive()) {...}!
  statement.  An example project \lstinline{.Rprofile} file is shown below.
\end{gotcha}

#+LATEX: \lstset{style=bash}
#+BEGIN_SRC sh
  #### -- Packrat Autoloader (version 0.5.0) -- ####
  source("packrat/init.R")
  #### -- End Packrat Autoloader -- ####

  # store the library search paths so that we can restore them later if needed
  stored_libpaths <- .libPaths()

  # source the ~/.Rprofile file, if one exists, and afterwards restore the
  # previous library search paths in case they were modified while processing the
  # file
  result = try(silent = TRUE, expr = {
    source("~/.Rprofile")
    .libPaths(stored_libpaths)
  })
#+END_SRC




** The =packrat/init.R= file

The src_shell[:exports code]{packrat/init.R} script has two purposes.  The first
is to bootstrap install Packrat if needed, possibly downloading it if necessary.
A common scenario that you might need to install Packrat for is if you copy a
project from one system to another system that doesn't have the Packrat package
installed.

The second, and main purpose that src_shell[:exports code]{packrat/init.R}
fulfills is to turn Packrat on at startup.  We describe what exactly this means
in the following section.




** Packrat's takover of =.libPaths=

The Packrat package has a concept of a "Packrat mode" which is either on or off
at any time.  When it is "on", it is with respect to a given project.  The
project can be changed, but for now we will consider only a single project.




*** Checking that Packrat mode is on

You can use the predicate src_shell[:exports code]{packrat:::isPackratModeOn} to
check if Packrat mode is on.




*** The values of =.libPaths=

Packrat changes the location of the libraries known to src_R[:exports
code]{.libPaths} to the project directories.  This affects src_R[:exports
code]{install.packages} and src_R[:exports code]{library}.  Note that even if
you set the src_shell[:exports code]{R_LIBS} environmental variable before
startup or specify it in one of the environmental files such as
src_shell[:exports code]{~/.Renviron}, that the user profile code runs after the
library search paths have been set, and overwrites it as a result.  For the
example project created earlier, the values of the data structure accessed by
src_R[:exports code]{.libPaths} is the following (and obviously the pathname
will vary across systems).

  # 1. =packrat/lib/x86_64-pc-linux-gnu/3.4.4= installed packages
  # 2. =packrat/lib-ext/x86_64-pc-linux-gnu/3.4.4= packages that ship with R
  # 3. =packrat/lib-R/x86_64-pc-linux-gnu/3.4.4= TODO: not sure what this is for!
  1. =packrat/lib/x86_64-pc-linux-gnu/3.4.4=
  2. =packrat/lib-ext/x86_64-pc-linux-gnu/3.4.4=
  3. =packrat/lib-R/x86_64-pc-linux-gnu/3.4.4=




** A closer look at the =packrat= directory

*** The source and installed package subdirectories

Let's take a closer look at the structure of the project directory tree.  We can
see that there are three subdirectories in the src_shell[:exports code]{packrat}
directory that contain installed packages: src_shell[:exports code]{lib},
src_shell[:exports code]{lib-ext}, and src_shell[:exports code]{lib-R}.  We note
that each subdirectory has a further subdirectory designating the system
followed by the R version number that the package was built with.

The src_shell[:exports code]{lib} directory is where installed package will go.
Right now it only contains the src_shell[:exports code]{packrat} package.  TODO:
I'm not sure yet what goes in the src_shell[:exports code]{lib-ext} directory.
Finally, the src_shell[:exports code]{lib-R} directory contains the standard
packages that ship with the R distribution (note that most of the packages are
omitted from the output to save space).  The src_shell[:exports code]{->} in
src_shell[:exports code]{tree} indicates that they are symbolic links to the
system-wide packages.

Finally we observe the source package directory src_shell[:exports code]{src}.
This contains the source code for all of the packages used by the project in
tarball form.  As we would expect, so far it only contains the
src_shell[:exports code]{packrat} package.

#+LATEX: \lstset{style=shell}
#+BEGIN_SRC shell
  userid@hostname:~/exampleRPackage$ tree -a -L 4 packrat
  packrat
  |-- init.R
  |-- lib
  |   `-- x86_64-pc-linux-gnu
  |       `-- 3.4.4
  |           `-- packrat
  |-- lib-ext
  |   `-- x86_64-pc-linux-gnu
  |       `-- 3.4.4
  |-- lib-R
  |   `-- x86_64-pc-linux-gnu
  |       `-- 3.4.4
  |           |-- base -> /usr/lib/R/library/base
  |           |-- <some packages omitted from output>
  |           `-- utils -> /usr/lib/R/library/utils
  |-- packrat.lock
  |-- packrat.opts
  `-- src
      `-- packrat
          `-- packrat_0.5.0.tar.gz

  41 directories, 4 files
#+END_SRC




*** The =.gitignore= and =.Rbuildignore= files

We can see that by default Packrat adds a line to the src_shell[:exports
code]{.gitignore} file so as to ignore the installed packages directories.  This
makes sense in most cases because they vary from system to system and we can
install them from the source code that is bundled with the project.

We also see that the src_shell[:exports code]{.Rbuildignore} file ignores the
src_shell[:exports code]{packrat} directory and the project src_shell[:exports
code]{.Rprofile} file.  This makes sense because it doesn't do us any good to
include any of package dependencies as part of an installed package.

#+BEGIN_SRC shell
  userid@hostname:~/exampleRPackage$ cat .gitignore
  packrat/lib*/

  userid@hostname:~/exampleRPackage$ cat .Rbuildignore
  ^packrat/
  ^\.Rprofile$
#+END_SRC




** The Packrat lockfile

The Packrat lockfile contains information specifying the version numbers for all
of the package dependencies and for R itself.  We see in the first few lines
that it specifies the Packrat version, the R version, and any repositories for
which to find packages.

The remaining blocks of lines in the file (for now just one block) specifies
information about package dependencies, including the package number and where
to find the package.

#+BEGIN_SRC shell
userid@hostname:~/exampleRPackage$ cat packrat/packrat.lock
PackratFormat: 1.4
PackratVersion: 0.5.0
RVersion: 3.4.4
Repos: cran=http://cran.us.r-project.org

Package: packrat
Source: CRAN
Version: 0.5.0
Hash: 498643e765d1442ba7b1160a1df3abf9
#+END_SRC




* Using Packrat to control package versions

** Installing packages

You can use the usual src_R[:exports code]{install.packages} to install a
package.  The installed package (and any possible dependencies) will be
installed into the src_shell[:exports
code]{packrat/lib/x86_64-pc-linux-gnu/3.4.4} directory due to the construction
of the directories stored by src_R[:exports code]{.libPaths}.

Let's consider a simple example.  We will install an R package src_R[:exports
code]{janeaustenr} that contains the text of Jane Austen's published books (and
more importantly for our purposes it doesn't have any dependencies).

We note in this example we can see that the lockfile hasn't been updated as a
result of the installation.  It turns out that this requires another step as
will be described in the following section.

#+BEGIN_SRC shell
  userid@hostname:~/exampleRPackage$ Rscript -e 'install.packages("janeaustenr")'
  Installing package into
  '/home/hostname/exampleRPackage/packrat/lib/x86_64-pc-linux-gnu/3.4.4'
  (as 'lib' is unspecified)
    % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                   Dload  Upload   Total   Spent    Left  Speed
  100 1103k  100 1103k    0     0  1872k      0 --:--:-- --:--:-- --:--:-- 1873k
  * installing *source* package 'janeaustenr' ...
  ** package 'janeaustenr' successfully unpacked and MD5 sums checked
  ** R
  ** data
  *** moving datasets to lazyload DB
  ** preparing package for lazy loading
  ** help
  *** installing help indices
  ** building package indices
  ** testing if installed package can be loaded
  * DONE (janeaustenr)

  The downloaded source packages are in
	'/tmp/Rtmp8x1utQ/downloaded_packages'

  userid@hostname:~/exampleRPackage$ tree -a -L 4 packrat
  packrat
  |-- init.R
  |-- lib
  |   `-- x86_64-pc-linux-gnu
  |       `-- 3.4.4
  |           |-- janeaustenr
  |           `-- packrat
  |-- lib-ext
  |   `-- x86_64-pc-linux-gnu
  |       `-- 3.4.4
  |-- lib-R
  |   `-- x86_64-pc-linux-gnu
  |       `-- 3.4.4
  |           |-- base -> /usr/lib/R/library/base
  |           |-- <some packages omitted>
  |           `-- utils -> /usr/lib/R/library/utils
  |-- packrat.lock
  |-- packrat.opts
  `-- src
      `-- packrat
          `-- packrat_0.5.0.tar.gz

  42 directories, 4 files

  userid@hostname:~/exampleRPackage$ cat packrat/packrat.lock
  PackratFormat: 1.4
  PackratVersion: 0.5.0
  RVersion: 3.4.4
  Repos: CRAN=http://cran.us.r-project.org/

  Package: packrat
  Source: CRAN
  Version: 0.5.0
  Hash: 498643e765d1442ba7b1160a1df3abf9
#+END_SRC


** Saving a snapshot of the supporting packages

To include the source tarball for an installed package in the Packrat project,
we use the R command src_R[:exports code]{packrat::snapshot}.  We can see that
this has the effect of installing the source tarball to the src_shell[:exports
code]{src} directory, and adding the package to the lockfile.

#+BEGIN_SRC shell
  userid@hostname:~/exampleRPackage$ Rscript -e 'packrat::snapshot()'

  Adding these packages to packrat:
		  _
      janeaustenr   0.1.5

  Fetching sources for janeaustenr (0.1.5) ... OK (CRAN current)
  Snapshot written to '/home/userid/exampleRPackage/packrat/packrat.lock'

  userid@hostname:~/exampleRPackage$ cat packrat/packrat.lock
  PackratFormat: 1.4
  PackratVersion: 0.5.0
  RVersion: 3.4.4
  Repos: CRAN=http://cran.us.r-project.org/

  Package: janeaustenr
  Source: CRAN
  Version: 0.1.5
  Hash: fa8163788aa6d49b17bf9bf517d5771e

  Package: packrat
  Source: CRAN
  Version: 0.5.0
  Hash: 498643e765d1442ba7b1160a1df3abf9


  userid@hostname:~/exampleRPackage$ tree -a packrat/src --charset=ascii
  packrat/src
  |-- janeaustenr
  |   `-- janeaustenr_0.1.5.tar.gz
  `-- packrat
      `-- packrat_0.5.0.tar.gz

  2 directories, 2 files
#+END_SRC




** Restoring a Packrat project

Suppose now that we obtain a Packrat project without the installed packages, for
example by cloning a git repository.  Let us emulate this by deleting the
installed package directories src_shell[:exports code]{lib}, src_shell[:exports
code]{lib-ext}, and src_shell[:exports code]{lib-R}.

\begin{gotcha}
  By default Packrat doesn't bootstrap itself for non-interactive sessions
  unless you use the TODO option.
\end{gotcha}

#+BEGIN_SRC shell
  userid@hostname:~/exampleRPackage$ rm -r packrat/lib*
  userid@hostname:~/exampleRPackage$ tree -a -I .git
  .
  |-- DESCRIPTION
  |-- .gitignore
  |-- man
  |-- NAMESPACE
  |-- packrat
  |   |-- init.R
  |   |-- packrat.lock
  |   |-- packrat.opts
  |   `-- src
  |       |-- janeaustenr
  |       |   `-- janeaustenr_0.1.5.tar.gz
  |       `-- packrat
  |           `-- packrat_0.5.0.tar.gz
  |-- R
  |-- .Rbuildignore
  |-- .Rhistory
  `-- .Rprofile

  6 directories, 11 files

  userid@hostname:~/exampleRPackage$ R --no-restore --no-save
  ...
  Packrat is not installed in the local library --
      attempting to bootstrap an installation...
  > Installing packrat into project private library:
  - 'packrat/lib/x86_64-pc-linux-gnu/3.4.4'
  ,* installing *source* package 'packrat' ...
  ,** package 'packrat' successfully unpacked and MD5 sums checked
  ,** R
  ,** inst
  ,** preparing package for lazy loading
  ,** help
  ,*** installing help indices
  ,** building package indices
  ,** testing if installed package can be loaded
  ,* DONE (packrat)
  > Attaching packrat
  > Restoring library
  > Packrat bootstrap successfully completed. Entering packrat mode...
  Packrat mode on. Using library in directory:
  - "~/exampleRPackage/packrat/lib"
  > q()

  userid@hostname:~/exampleRPackage$ tree -a -L 4 packrat
  packrat
  |-- init.R
  |-- lib
  |   `-- x86_64-pc-linux-gnu
  |       `-- 3.4.4
  |           `-- packrat
  |-- lib-ext
  |   `-- x86_64-pc-linux-gnu
  |       `-- 3.4.4
  |-- lib-R
  |   `-- x86_64-pc-linux-gnu
  |       `-- 3.4.4
  |           |-- base -> /usr/lib/R/library/base
  |           |-- <some packages omitted>
  |           `-- utils -> /usr/lib/R/library/utils
  |-- packrat.lock
  |-- packrat.opts
  `-- src
      |-- janeaustenr
      |   `-- janeaustenr_0.1.5.tar.gz
      `-- packrat
	  `-- packrat_0.5.0.tar.gz

  42 directories, 5 files
#+END_SRC

#+LATEX: \lstset{style=r-console}
#+BEGIN_SRC R
  > packrat::status()

  The following packages are tracked by packrat, but are no longer available in
  the local library nor present in your code:
		  _
      janeaustenr   0.1.5

  You can call packrat::snapshot() to remove these packages from the lockfile, or
  if you intend to use these packages, use packrat::restore() to restore them to
  your private library.

  > packrat::snapshot()

  Removing these packages from packrat:
		  _
      janeaustenr   0.1.5

  Do you want to continue? [Y/n]: Y
  Snapshot written to '/home/userid/exampleRPackage/packrat/packrat.lock'
#+END_SRC

#+LATEX: \lstset{style=shell}
#+BEGIN_SRC shell
  userid@hostname:~/exampleRPackage$ tree -a -L 3 packrat
  packrat
  |-- init.R
  |-- lib
  |   `-- x86_64-pc-linux-gnu
  |       `-- 3.4.4
  |-- lib-ext
  |   `-- x86_64-pc-linux-gnu
  |       `-- 3.4.4
  |-- lib-R
  |   `-- x86_64-pc-linux-gnu
  |       `-- 3.4.4
  |-- packrat.lock
  |-- packrat.opts
  `-- src
      |-- janeaustenr
      |   `-- janeaustenr_0.1.5.tar.gz
      `-- packrat
	  `-- packrat_0.5.0.tar.gz

  12 directories, 5 files

  userid@hostname:~/exampleRPackage$ cat packrat/packrat.lock
  PackratFormat: 1.4
  PackratVersion: 0.5.0
  RVersion: 3.4.4
  Repos: CRAN=https://cran.rstudio.com/

  Package: packrat
  Source: CRAN
  Version: 0.5.0
  Hash: 498643e765d1442ba7b1160a1df3abf9
#+END_SRC





# * Further details

# ** Running R in a directory with Packrat

# The =init.R= file has the following section of code inside a top-level call to
# =local=.  The =libDir= variable is set in an earlier section of code to the
# location of the local version of Packrat, so for our example this is TODO.

# #+BEGIN_SRC R
# if (suppressWarnings(requireNamespace("packrat", quietly = TRUE, lib.loc = libDir))) {

#   # some code determining whether to set the variable `print.banner` to `TRUE` or `FALSE`

#   return(packrat::on(print.banner = print.banner))
# }
# #+END_SRC

# The =init.R= file calls =packrat::on=, which in turn calls
# =packrat::setPackratModeOn=.  This function first obtains a value for the
# varible =state=, which stores information that can be used to return an R
# session to its usual state if Packrat mode is on.  Next, an environmental
# variable =R_PACKRAT_MODE= is set as a flag to indicate that Packrat mode is on
# by calling =setPackratModeEnvironmentVar=.  After this,
# =packrat::setPackratModeOn= calls =packrat::afterPackratModeOn= and returns.



# *** Bootstrapping Packrat

# If you obtain a Packrat project from a VCS, then it will typically not include
# the =packrat/lib*/= directories, since these can be derived from other
# information.  Packrat will install them for you if needed (how, by calling the
# .Rprofile function?).
