* Using Packrat for package dependency management in R

** Overview

TODO




** Useful links

Here are the canonical Packrat links.

https://rstudio.github.io/packrat/
https://cran.r-project.org/package=packrat




* New project packrat initialization

** Creating

Suppose for the time-being that we are starting a new project that we want to
use Packrat with.  We will later consider adding Packrat to an existing project.

To start, we use =usethis= to create a package =exampleRPackage=, and initialize
git in the new directory.  Then we use the =tree= utility to see the contents of
the new directory (but ignoring the =.git= directory).  As an aside, we note
that it is helpful to initialize git before initializing Packrat, because the
Packrat will add a =.gitignore= file for us in the directory if it sees that the
project is version controlled with git.

#+BEGIN_SRC sh
  userid@hostname:~$ Rscript --vanilla \
  >                          -e 'usethis::create_package("exampleRPackage")'
  ✔ Setting active project to '/home/userid/exampleRPackage'
  ✔ Creating 'R/'
  ✔ Creating 'man/'
  ✔ Writing 'DESCRIPTION'
  ✔ Writing 'NAMESPACE'
  dpritch@aspire-a517-51g:~/Downloads$ cd exampleRPackage/
  userid@hostname:~/exampleRPackage$ git init
  Initialized empty Git repository in /home/dpritch/Downloads/exampleRPackage/.git/
  userid@hostname:~/exampleRPackage$ tree -a -I .git
  .
  |-- DESCRIPTION
  |-- man
  |-- NAMESPACE
  `-- R

  2 directories, 2 files
#+END_SRC

Next, let's initialize the project with Packrat.  The command to initialize a
Packrat project is the R command =packrat::init=.  This leads us to a particular
difficulty that I had when initializing Packrat.

*GOTCHA #1*: Packrat tries to unload the non-default libraries (unanswered
question: why?)  when running =init=.  For me the unloading failed when
=devtools= was loaded.  Thus, it is advisable to initialize packrat from a clean
session using e.g. =R --vanilla= to avoid any such headaches.

So we run =packrat::init= in a clean session then look at the newly created
files (ignoring files more than three levels deep).

#+BEGIN_SRC sh
  userid@hostname:~/exampleRPackage$ Rscript --vanillla -e 'packrat::init(".")'
  Initializing packrat project in directory:
  - "~/Downloads/exampleRPackage"

  Adding these packages to packrat:
              _
      packrat   0.5.0

  Fetching sources for packrat (0.5.0) ... OK (CRAN current)
  Snapshot written to '/home/userid/exampleRPackage/packrat/packrat.lock'
  Installing packrat (0.5.0) ...
          OK (built source)
  Initialization complete!

  userid@hostname:~/exampleRPackage$ tree -a --charset=ascii -I '.git' -L 4
  .
  |-- DESCRIPTION
  |-- .gitignore
  |-- man
  |-- NAMESPACE
  |-- packrat
  |   |-- init.R
  |   |-- lib
  |   |   `-- x86_64-pc-linux-gnu
  |   |       `-- 3.4.4
  |   |-- lib-ext
  |   |   `-- x86_64-pc-linux-gnu
  |   |       `-- 3.4.4
  |   |-- lib-R
  |   |   `-- x86_64-pc-linux-gnu
  |   |       `-- 3.4.4
  |   |-- packrat.lock
  |   |-- packrat.opts
  |   `-- src
  |       `-- packrat
  |           `-- packrat_0.5.0.tar.gz
  |-- R
  |-- .Rbuildignore
  `-- .Rprofile

  14 directories, 9 files
#+END_SRC











GOTCHA #2: if the =--vanilla= or =--no-environ= command line argument was
provided to =R=, or the =R_PROFILE_USER= environmental variable was set or
provided in one of the environmental files such as =~/.Renviron=, then Packrat
will not work as desired.




*** A note about using Packrat with git

If you have a =.git= directory at the top level of your project, then
=packrat::init= will append the line =packrat/lib*/= to your =.gitignore= file
(creating the =.gitignore= file if one doesn't yet exist).  If you ran
=packrat::init= before you initialized your git repository, then you should
manually add this line since these directories are specific the local system.



*** Packrat project skeleton

This creates a project skeleton as follows.


#+BEGIN_SRC shell
userid@hostname:~/projects/myprojdir$ tree -a --charset=ascii
#+END_SRC


#+BEGIN_SRC shell
userid@hostname:~/projects/myprojdir$ tree -a -I 'packrat/lib*'
#+END_SRC

#+BEGIN_SRC shell
userid@hostname:~/projects/myprojdir$ tree -a -L 4
#+END_SRC




*** Packrat directory organization

Packrat places the =.Rprofile= file at the top level of you project directory.
The contents of the file are simply the following:

#+BEGIN_SRC shell
#### -- Packrat Autoloader (version 0.5.0) -- ####
source("packrat/init.R")
#### -- End Packrat Autoloader -- ####
#+END_SRC

The intention is that when you work on a project with Packrat, that you start
your R session in the project directory.  When you do this then R will source
the =.Rprofile= file as part of the startup process.  A few points to note:

  - This means that you can't use usual recommended practice of invoking the
    =--vanilla= option when running scripts.  Instead you can use =--no-save
    --no-restore --no-site-file --no-environ=.
  - You must start R in the top-level directory: using a subdirectory
    doesn't have the same effect.  So you can't =cd= into a subdirectory and run
    a command such as =Rscript myscript= as you often might.
  - Your user R profile isn't loaded.  You can source it after startup, but note
    that if you have commands inside of a =.First= function, then you will have
    to explicitly call it yourself since R won't call it for you.



** Packrat mode

The Packrat package has a concept of a "Packrat mode" which is either on or off
at any time.  When it is "on", it is with respect to a given project.  The
project can be changed.




** Running R in a directory with Packrat

# The =init.R= file has the following section of code inside a top-level call to
# =local=.  The =libDir= variable is set in an earlier section of code to the
# location of the local version of Packrat, so for our example this is TODO.

# #+BEGIN_SRC R
# if (suppressWarnings(requireNamespace("packrat", quietly = TRUE, lib.loc = libDir))) {

#   # some code determining whether to set the variable `print.banner` to `TRUE` or `FALSE`

#   return(packrat::on(print.banner = print.banner))
# }
# #+END_SRC

The =init.R= file calls =packrat::on=, which in turn calls
=packrat::setPackratModeOn=.  This function first obtains a value for the
varible =state=, which stores information that can be used to return an R
session to its usual state if Packrat mode is on.  Next, an environmental
variable =R_PACKRAT_MODE= is set as a flag to indicate that Packrat mode is on
by calling =setPackratModeEnvironmentVar=.  After this,
=packrat::setPackratModeOn= calls =packrat::afterPackratModeOn= and returns.

*** Checking that Packrat mode is on

Use =packrat:::isPackratModeOn=.


*** Changing the value of =.libPaths=

Packrat changes the location of the libraries known to =.libPaths= to the
project directories.  This affects =install.packages= and =library=.  Note that
even if you set the =R_LIBS= environmental variable before startup or specify it
in one of the environmental files such as =~/.Renviron=, that the user profile
code runs after the library search paths have been set, and so overwrites it.

Where exactly?
  1. =packrat/lib/x86_64-pc-linux-gnu/3.4.4= installed packages
  2. =packrat/lib-ext/x86_64-pc-linux-gnu/3.4.4= packages that ship with R
  3. =packrat/lib-R/x86_64-pc-linux-gnu/3.4.4= not sure what this is for!


*** Bootstrapping Packrat

If you obtain a Packrat project from a VCS, then it will typically not include
the =packrat/lib*/= directories, since these can be derived from other
information.  Packrat will install them for you if needed (how, by calling the
.Rprofile function?).


*** Installing packages

You can use the usual =install.packages= to install a package.  The installed
package will be installed into =packrat/lib/x86_64-pc-linux-gnu/3.4.4= due to
the construction of the directories stored by =.libPaths=.

To include the source package in the directory, call =packrat::snapshot=.  Note
that this has to be done during the same session that =install.packages= was called.
