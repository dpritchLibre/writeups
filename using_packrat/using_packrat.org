#+TITLE: Using Packrat for package dependency management in R

#+LaTeX_HEADER: \usepackage[margin=1.9cm]{geometry}
#+LaTeX_HEADER: \usepackage[x11names]{xcolor}
#+LaTeX_HEADER: \usepackage{amsthm}
#+LaTeX_HEADER: \usepackage{titlesec}
#+LaTeX_HEADER: \hypersetup{linktoc = all, colorlinks = true, urlcolor = DodgerBlue4, citecolor = PaleGreen1, linkcolor = black}

#+BEGIN_LaTeX
  % background color for code environments
  \definecolor{lightyellow}{RGB}{255,255,224}
  \definecolor{lightbrown}{RGB}{249,234,197}

  \lstset{%
    basicstyle=\fontsize{10}{11}\fontfamily{pcr}\selectfont
  }

  % create a listings environment for Bash
  \lstdefinestyle{bash}{%
    language=bash,
    backgroundcolor=\color{lightyellow},
    basicstyle=\fontsize{10}{11}\fontfamily{pcr}\selectfont,
    keywordstyle=\color{Firebrick3},
    stringstyle=\color{Green4},
    commentstyle=\color{Purple3},
    showstringspaces=false,
    morecomment=[l]{userid@},
    morecomment=[l]{onyenid@},
    morecomment=[l]{localid@},
    morecomment=[l]{sftp> },
    moredelim=[is][\bfseries]{[*@}{@*]},
    framesep=4pt,
    framexleftmargin=3pt,
    framextopmargin=3pt,
    framexrightmargin=3pt,
    framexbottommargin=3pt
  }


  % create an environment for shell sessions
  \lstdefinestyle{shell}{%
    backgroundcolor=\color{lightbrown},
    basicstyle=\fontsize{10.40}{11.40}\fontfamily{pcr}\selectfont,
    commentstyle=\bfseries,
    morecomment=[l]{userid@},
    morecomment=[l]{onyenid@},
    morecomment=[l]{localid@},
    morecomment=[l]{sftp> },
    moredelim=[is][\bfseries]{[*@}{@*]},
    escapeinside={(*@}{@*)},
    frame=single,
    rulesepcolor=\color{gray},
    rulecolor=\color{lightbrown},
    framesep=2pt,
    framexleftmargin=3pt,
    framextopmargin=3pt,
    framexrightmargin=3pt,
    framexbottommargin=3pt
  }


  % create a light blue colored background for R scripts
  \lstdefinestyle{r-script}{%
    language=R,
    backgroundcolor=\color{Blue1!5},
    basicstyle=\fontsize{10}{11}\fontfamily{pcr}\selectfont,
    keywordstyle=\color{Firebrick3},
    commentstyle=\color{DarkOrchid4},
    stringstyle=\color{Blue1},
    showstringspaces=false,
    otherkeywords = {},
    deletekeywords={action, args, as, char, commandArgs, csv, data, expr, file, getenv,
      integer, install, installed, interactive, length, library, max, mean, min,
      nchar, new, numeric, packages, path, print, read, save, set, substr,
      summary, write, \%/\%, \%_\%}
  }

  % \theoremstyle{definition}
  \newtheorem{gotcha}{Gotcha}

  % titlesec documentation:
  % http://ctan.mackichan.com/macros/latex/contrib/titlesec/titlesec.pdf

  % see pgs 4-5 of documentation for titlespacing syntax.  The command signature
  % is: \titlespacing*{<command>}{<left>}{<before-sep>}{<after-sep>}[<right-sep>]

  \titlespacing*{\section}{0pt}{10mm plus 1ex minus .2ex}{4mm plus .2ex}

  \titlespacing*{\subsection}{0pt}{10mm plus 1ex minus .2ex}{2mm plus .2ex}

  \titlespacing*{\subsubsection}{0pt}{5mm plus 1ex minus .2ex}{2mm plus .2ex}
#+END_LaTeX




* Introduction

** Overview

TODO




** Useful links

Here are the canonical Packrat links.

  - https://rstudio.github.io/packrat/
  - https://cran.r-project.org/package=packrat




* New project Packrat initialization

** Creating a skeleton package

Suppose for the time-being that we are starting a new project that we want to
use Packrat with.  We will later consider adding Packrat to an existing project.

To start, we use =usethis= to create a package =exampleRPackage=, and initialize
git in the new directory.  Then we use the =tree= utility to see the contents of
the new directory (but ignoring the =.git= directory).  As an aside, we note
that it is helpful to initialize git before initializing Packrat, because the
Packrat will add a =.gitignore= file for us in the directory if it sees that the
project is version controlled with git.

#+LATEX: \lstset{style=shell}
#+BEGIN_SRC shell
  userid@hostname:~$ Rscript --vanilla \
  [*@>                          -e 'usethis::create_package("exampleRPackage")'@*]
  + Setting active project to '/home/userid/exampleRPackage'
  + Creating 'R/'
  + Creating 'man/'
  + Writing 'DESCRIPTION'
  + Writing 'NAMESPACE'

  dpritch@aspire-a517-51g:~/Downloads$ cd exampleRPackage/
  userid@hostname:~/exampleRPackage$ git init

  Initialized empty Git repository in /home/dpritch/Downloads/exampleRPackage/.git/
  userid@hostname:~/exampleRPackage$ tree -a -I .git
  .
  |-- DESCRIPTION
  |-- man
  |-- NAMESPACE
  `-- R

  2 directories, 2 files
#+END_SRC




** Initializing Packrat

Next, let's initialize the project with Packrat.  The command to initialize a
Packrat project is the R command =packrat::init=, so we run =packrat::init= in a
clean R session, and then take a look at the newly created files (ignoring files
more than three levels deep).

We note that if you have a =.git= directory at the top level of your project,
then =packrat::init= will append the line =packrat/lib*/= to your =.gitignore=
file (creating the =.gitignore= file if one doesn't yet exist).  If you ran
=packrat::init= before you initialized your git repository, then you will
usually want to add this line since the directories that are ignored are
specific the local system.

\begin{gotcha}
  Packrat tries to unload the non-default libraries (unanswered
  question: why?)  when running \texttt{init}.  For me the unloading failed when
  \texttt{devtools} was loaded.  Thus, it is advisable to initialize Packrat from
  a clean session using e.g. \texttt{R --vanilla} to avoid any such difficulties.
\end{gotcha}

#+BEGIN_SRC shell
  userid@hostname:~/exampleRPackage$ Rscript --vanillla -e 'packrat::init(".")'
  Initializing packrat project in directory:
  - "~/Downloads/exampleRPackage"

  Adding these packages to packrat:

      packrat  0.5.0

  Fetching sources for packrat (0.5.0) ... OK (CRAN current)
  Snapshot written to '/home/userid/exampleRPackage/packrat/packrat.lock'
  Installing packrat (0.5.0) ...
          OK (built source)
  Initialization complete!

  userid@hostname:~/exampleRPackage$ tree -a -I '.git' -L 4
  .
  |-- DESCRIPTION
  |-- .gitignore
  |-- man
  |-- NAMESPACE
  |-- packrat
  |   |-- init.R
  |   |-- lib
  |   |   `-- x86_64-pc-linux-gnu
  |   |       `-- 3.4.4
  |   |-- lib-ext
  |   |   `-- x86_64-pc-linux-gnu
  |   |       `-- 3.4.4
  |   |-- lib-R
  |   |   `-- x86_64-pc-linux-gnu
  |   |       `-- 3.4.4
  |   |-- packrat.lock
  |   |-- packrat.opts
  |   `-- src
  |       `-- packrat
  |           `-- packrat_0.5.0.tar.gz
  |-- R
  |-- .Rbuildignore
  `-- .Rprofile

  14 directories, 9 files
#+END_SRC




** The project =.Rprofile= file

*** The =.Rprofile= and other related files

In the shell session below we can see that Packrat places the =.Rprofile= file
at the top level of you project directory with the following contents.  The
intention is that when you work on a project with Packrat that you start your R
session in the project directory.  When you do start R in the project directory
then R as a result R will source the =.Rprofile= file as part of the startup
process, which in turn sources =packrat/init.R=.

#+BEGIN_SRC shell
  userid@hostname:~/exampleRPackage$ cat .Rprofile
  #### -- Packrat Autoloader (version 0.5.0) -- ####
  source("packrat/init.R")
  #### -- End Packrat Autoloader -- ####
#+END_SRC




*** =.Rprofile=-related workflow changes.

The fact that Packrat places an =.Rprofile= file at the top of your project
directory raises the following potential issues.

\begin{gotcha}
  This means that you can't use usual recommended practice of invoking the
  \texttt{--vanilla} option when running scripts.  Instead you can use \texttt{--no-save}
  \texttt{--no-restore} \texttt{--no-site-file} \texttt{--no-environ}.

  Additionally, if the \texttt{R\_PROFILE\_USER} environmental variable was set or
  provided in one of the environmental files such as \texttt{~/.Renviron}, then the
  project \texttt{.Rprofile} file will not be loaded at startup and Packrat
  won't work as desired.
\end{gotcha}

\begin{gotcha}
  You have to start R in the top-level directory: starting R in a subdirectory
  doesn't have the same effect.  So for example, you can't  \texttt{cd} into a
  subdirectory and run a command such as \texttt{Rscript myscript} as you typically would.
\end{gotcha}

\begin{gotcha}
  If the project \texttt{.Rprofile} is loaded, then your user R profile isn't
  loaded.  You can however, explicitly source your user \texttt{.Rprofile} from
  the project profile, but beware, now you don't have the option of turning off
  any directives in the user \texttt{.Rprofile} by using a \texttt{--vanilla}
  or \texttt{--no-init} option when reproducibility is important.  Thus it may
  be advisable to wrap your code in an \texttt{if (interactive()) \{\dots \}}
  statement.  An example project \texttt{.Rprofile} file is shown below.
\end{gotcha}

#+LATEX: \lstset{style=bash}
#+BEGIN_SRC sh
  #### -- Packrat Autoloader (version 0.5.0) -- ####
  source("packrat/init.R")
  #### -- End Packrat Autoloader -- ####

  # store the library search paths so that we can restore them later if needed
  stored_libpaths <- .libPaths()

  # source the ~/.Rprofile file, if one exists, and afterwards restore the
  # previous library search paths in case they were modified while processing the
  # file
  result = try(silent = TRUE, expr = {
    source("~/.Rprofile")
    .libPaths(stored_libpaths)
  })
#+END_SRC




** The =packrat/init.R= file

The =packrat/init.R= script has two purposes.  The first is to bootstrap install
Packrat if needed, by downloading it if necessary.  A common scenario that you
might need to install Packrat for is if you copy a project from one system to
another.

The second, and main purpose that =packrat/init.R= fulfills, is to turn Packrat
on at startup.  We describe what exactly this means in what follows.








** The =.gitignore= and =.Rbuildignore= files

#+BEGIN_SRC shell
  userid@hostname:~/exampleRPackage$ cat .gitignore
  packrat/lib*/

  userid@hostname:~/exampleRPackage$ cat .Rbuildignore
  ^packrat/
  ^\.Rprofile$
#+END_SRC







*** Packrat project skeleton

This creates a project skeleton as follows.


#+BEGIN_SRC shell
userid@hostname:~/projects/myprojdir$ tree -a --charset=ascii
#+END_SRC


#+BEGIN_SRC shell
userid@hostname:~/projects/myprojdir$ tree -a -I 'packrat/lib*'
#+END_SRC

#+BEGIN_SRC shell
userid@hostname:~/projects/myprojdir$ tree -a -L 4
#+END_SRC




*** Packrat directory organization

Packrat places the =.Rprofile= file at the top level of you project directory.
The contents of the file are simply the following:

#+BEGIN_SRC shell
#### -- Packrat Autoloader (version 0.5.0) -- ####
source("packrat/init.R")
#### -- End Packrat Autoloader -- ####
#+END_SRC

The intention is that when you work on a project with Packrat, that you start
your R session in the project directory.  When you do this then R will source
the =.Rprofile= file as part of the startup process.  A few points to note:

  - This means that you can't use usual recommended practice of invoking the
    =--vanilla= option when running scripts.  Instead you can use =--no-save
    --no-restore --no-site-file --no-environ=.
  - You must start R in the top-level directory: using a subdirectory
    doesn't have the same effect.  So you can't =cd= into a subdirectory and run
    a command such as =Rscript myscript= as you often might.
  - Your user R profile isn't loaded.  You can source it after startup, but note
    that if you have commands inside of a =.First= function, then you will have
    to explicitly call it yourself since R won't call it for you.



** Packrat mode

The Packrat package has a concept of a "Packrat mode" which is either on or off
at any time.  When it is "on", it is with respect to a given project.  The
project can be changed.




** Running R in a directory with Packrat

# The =init.R= file has the following section of code inside a top-level call to
# =local=.  The =libDir= variable is set in an earlier section of code to the
# location of the local version of Packrat, so for our example this is TODO.

# #+BEGIN_SRC R
# if (suppressWarnings(requireNamespace("packrat", quietly = TRUE, lib.loc = libDir))) {

#   # some code determining whether to set the variable `print.banner` to `TRUE` or `FALSE`

#   return(packrat::on(print.banner = print.banner))
# }
# #+END_SRC

The =init.R= file calls =packrat::on=, which in turn calls
=packrat::setPackratModeOn=.  This function first obtains a value for the
varible =state=, which stores information that can be used to return an R
session to its usual state if Packrat mode is on.  Next, an environmental
variable =R_PACKRAT_MODE= is set as a flag to indicate that Packrat mode is on
by calling =setPackratModeEnvironmentVar=.  After this,
=packrat::setPackratModeOn= calls =packrat::afterPackratModeOn= and returns.

*** Checking that Packrat mode is on

Use =packrat:::isPackratModeOn=.


*** Changing the value of =.libPaths=

Packrat changes the location of the libraries known to =.libPaths= to the
project directories.  This affects =install.packages= and =library=.  Note that
even if you set the =R_LIBS= environmental variable before startup or specify it
in one of the environmental files such as =~/.Renviron=, that the user profile
code runs after the library search paths have been set, and so overwrites it.

Where exactly?
  1. =packrat/lib/x86_64-pc-linux-gnu/3.4.4= installed packages
  2. =packrat/lib-ext/x86_64-pc-linux-gnu/3.4.4= packages that ship with R
  3. =packrat/lib-R/x86_64-pc-linux-gnu/3.4.4= not sure what this is for!


*** Bootstrapping Packrat

If you obtain a Packrat project from a VCS, then it will typically not include
the =packrat/lib*/= directories, since these can be derived from other
information.  Packrat will install them for you if needed (how, by calling the
.Rprofile function?).


*** Installing packages

You can use the usual =install.packages= to install a package.  The installed
package will be installed into =packrat/lib/x86_64-pc-linux-gnu/3.4.4= due to
the construction of the directories stored by =.libPaths=.

To include the source package in the directory, call =packrat::snapshot=.  Note
that this has to be done during the same session that =install.packages= was called.
